// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/conversation.dart';
import 'data/model/message.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6715182166202861895),
      name: 'Conversation',
      lastPropertyId: const IdUid(2, 2935179644779578314),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7444668573304446545),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2935179644779578314),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'messages', srcEntity: 'Message', srcField: 'conversation')
      ]),
  ModelEntity(
      id: const IdUid(2, 548786419347908769),
      name: 'Message',
      lastPropertyId: const IdUid(4, 1988776387876255736),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4464755024944176890),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2228122125001173981),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8322707654890505512),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1988776387876255736),
            name: 'conversationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6855514899862579937),
            relationTarget: 'Conversation')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 548786419347908769),
      lastIndexId: const IdUid(1, 6855514899862579937),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Conversation: EntityDefinition<Conversation>(
        model: _entities[0],
        toOneRelations: (Conversation object) => [],
        toManyRelations: (Conversation object) => {
              RelInfo<Message>.toOneBacklink(4, object.id,
                      (Message srcObject) => srcObject.conversation):
                  object.messages
            },
        getId: (Conversation object) => object.id,
        setId: (Conversation object, int id) {
          object.id = id;
        },
        objectToFB: (Conversation object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final object = Conversation(title: titleParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Conversation>(
              object.messages,
              store,
              RelInfo<Message>.toOneBacklink(
                  4, object.id, (Message srcObject) => srcObject.conversation));
          return object;
        }),
    Message: EntityDefinition<Message>(
        model: _entities[1],
        toOneRelations: (Message object) => [object.conversation],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addInt64(2, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.conversation.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final object = Message(text: textParam, createdAt: createdAtParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.conversation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.conversation.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Conversation] entity fields to define ObjectBox queries.
class Conversation_ {
  /// see [Conversation.id]
  static final id =
      QueryIntegerProperty<Conversation>(_entities[0].properties[0]);

  /// see [Conversation.title]
  static final title =
      QueryStringProperty<Conversation>(_entities[0].properties[1]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.id]
  static final id = QueryIntegerProperty<Message>(_entities[1].properties[0]);

  /// see [Message.text]
  static final text = QueryStringProperty<Message>(_entities[1].properties[1]);

  /// see [Message.createdAt]
  static final createdAt =
      QueryIntegerProperty<Message>(_entities[1].properties[2]);

  /// see [Message.conversation]
  static final conversation =
      QueryRelationToOne<Message, Conversation>(_entities[1].properties[3]);
}
